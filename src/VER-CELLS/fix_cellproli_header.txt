/* -*- c++ -*- ----------------------------------------------------------
   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
   https://www.lammps.org/, Sandia National Laboratories
   Steve Plimpton, sjplimp@sandia.gov

   Copyright (2003) Sandia Corporation.  Under the terms of Contract
   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
   certain rights in this software.  This software is distributed under
   the GNU General Public License.

   See the README file in the top-level LAMMPS directory.
------------------------------------------------------------------------- */

/*CELL PROLIFERATION: IT WILL INCLUDE CELL EXPANSION, DIVISION, AND APOPTOSIS*/

#ifdef FIX_CLASS
// clang-format off
FixStyle(cellproli,FixCellProli);
// clang-format on
#else

#ifndef LMP_FIX_CELLPROLI_H
#define LMP_FIX_CELLPROLI_H

#include "fix.h"

namespace LAMMPS_NS {

class FixCellProli : public Fix {
 public:
  FixCellProli(class LAMMPS *, int, char **);
  ~FixCellProli() override;
  //void post_constructor(); //might need afterwards for cell growth based on increase in ref area
  void setup_pre_exchange() override;
  void pre_exchange() override;
  int setmask() override;
  void init() override;
  //double memory_usage();
  //void min_setup(int) override;

  int pack_forward_comm(int, int *, double *, int, int *);
  void unpack_forward_comm(int, int, double *);

 protected:
  int me, nprocs;

 private:
  int nmax, maxatom;
  double Ar_apop, Ar_div, Ex_rate;

  char *idregion;
  char *id_compute_voronoi;
  class Region *region;
  class Compute *vcompute;

  //class Fix *fstore;

  int ilevel_respa;

  // To read peratom data from compute voronoi
  double *voro_area, *voro_peri;    //Note that these are arrays

  // for communicating data of ghost atoms
  int commflag;

  //for atom deletion
  int *list;
  int *mark;

  class RanMars *wgn;
  int seed_wgn;
  
};

}    // namespace LAMMPS_NS

#endif
#endif
